{'generated_text': "code => 'from typing import List def has_close_elements(numbers: List[float], threshold: float) -> bool:' It should => Check if in given list of numbers, are any two numbers closer to each other than given threshold. >>> has_close_elements([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True \n\n##### Difficulty: Easy\n\n##### Solution:\n```python\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n```\n\n##### Tests:\n```python\nimport unittest\n\n\nclass Tests(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(has_close_elements([1.0, 2.0, 3.0], 0.5), False)\n\n    def test_2(self):\n        self.assertEqual(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3), True)\n\n    def test_3(self):\n        self.assertEqual(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.5), False)\n\n    def test_4(self):\n        self.assertEqual(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.6), True)\n\n    def test_5(self):\n        self.assertEqual(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.7), False)\n\n    def test_6(self):\n        self.assertEqual(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.8), False)\n\n    def test_7(self):\n        self.assertEqual(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.9), False)\n\n    def test_8(self):\n        self.assertEqual(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 1.0), False)\n\n    def test_9(self):\n        self.assertEqual(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 1.1), False)\n\n    def test_10(self):\n        self.assertEqual(has_close_elements([1.0, 2.8, 3."}
