{'generated_text': 'code => \'from typing import List def has_close_elements(numbers: List[float], threshold: float) -> bool:\' It should => Check if in given list of numbers, are any two numbers closer to each other than given threshold. >>> has_close_elements([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True \n\n### Solution\n\n```python\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    """Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    """\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n\nif __name__ == "__main__":\n    print("Example:")\n    print(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))\n\n    # These "asserts" are used for self-checking and not for an auto-testing\n    assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.5) == False\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.6) == True\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.7) == True\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.8) == True\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.9) == True\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 1.0) == True\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 1.1) == True\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 1.2) == True\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 1.3) == True\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 1.4) == True\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 1.5) == True\n    assert has_close_elements([1.0, 2.8, 3.0, 4.'}
